<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--
        配置文件通用属性
        <property name="" value=""></property>
        所谓配置文件中的通用属性是为了让接下来的配置更加方便引用
        通过以${name}的方式，方便地取得value值
        通过取得的value值可以做文件的其他配置而使用
    -->

    <!--
        我们在此可以先做日志输出格式相关的配置
        日志输出格式：
            %-10lever  级别 案例为设置10个字符，左对齐
            %d{yyyy-MM-dd HH:mm:ss.SSS} 日期
            %c 当前类全限定名
            %M 当前执行日志的方法
            %L 行号
            %thread 线程名称
            %m或者%msg 信息
            %n 换行
          以property的形式将日志输出格式配置成为文件的通用的属性
          那么下面我们配置的输出方式中，就可以重复的引用该配置（以下的配置，对于输出格式就不用配置多次了）
    -->
    <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L %thread %m%n"></property>
    <property name="pattern1" value="%-5level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m%n"></property>
    <!--
       配置文件的输出路径
   -->
    <property name="logDir" value="/Users/ahbin/project/study/springbootlog-study/springbootlog.log"></property>
    <!--
           配置文件的appender 可拆分归档的文件
       -->
    <appender name="rollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--   引入文件位置     -->
        <file>${logDir}//roll_logback.log</file>
        <!--   指定拆分规则     -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--   按照时间和压缩格式声明文件名 压缩格式gz     -->
            <fileNamePattern>${logDir}//roll_%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
            <!--   按照文件大小来进行拆分     -->
            <maxFileSize>1KB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--    格式引用通用属性配置        -->
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>
    <!--
           配置Html文件的appender
       -->
    <appender name="htmlFileAppender" class="ch.qos.logback.core.FileAppender">
        <!--   引入文件位置     -->
        <file>${logDir}//logback.html</file>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>${pattern1}</pattern>
            </layout>
        </encoder>
    </appender>
    <!--
           配置普通文件的appender
       -->
    <appender name="fileAppender" class="ch.qos.logback.core.FileAppender">
        <!--   引入文件位置     -->
        <file>${logDir}//logback.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--    格式引用通用属性配置        -->
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!--
        配置控制台appender 使用过滤器
    -->
    <appender name="consoleFilterAppender" class="ch.qos.logback.core.ConsoleAppender">
        <target>
            System.err
        </target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!--   配置过滤器     -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--   设置日志的输出级别     -->
            <level>ERROR</level>
            <!--   高于level中设置的级别，则打印日志     -->
            <onMatch>ACCEPT</onMatch>
            <!--   低于level中设置的级别，则屏蔽日志     -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
        配置控制台appender
    -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <!--
            表示对于日志输出目标的配置，
            默认：system.out 表示以黑色字体输出日志
            设置：System.err 表示以红色字体输出日志
        -->
        <target>
            System.err
        </target>
        <!--
            配置日志输出格式
            手动配置格式的方式
            直接引入上述的通用属性即可
       -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--    格式引用通用属性配置        -->
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!--
        配置异步日志
    -->
    <appender name="asynAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="consoleAppender"></appender-ref>
    </appender>

    <!--
        日志记录器
        配置root logger
        level:配置日志级别

        可以同时配置多个appender,做日志的多方向输出
    -->
    <root level="ALL">
        <!-- 引入appender -->
<!--        <appender-ref ref="consoleAppender"></appender-ref>-->
<!--        <appender-ref ref="fileAppender"></appender-ref>-->
<!--        <appender-ref ref="htmlFileAppender"></appender-ref>-->
        <appender-ref ref="rollingFileAppender"></appender-ref>
<!--        <appender-ref ref="consoleFilterAppender"></appender-ref>-->
<!--        <appender-ref ref="asynAppender"></appender-ref>-->
    </root>
    <!--
        自定义logger
        additivity="false"
        表示不继承rootloggeer
    -->
    <logger name="com.ahbin" level="info" additivity="false">
        <appender-ref ref="consoleAppender"></appender-ref>
    </logger>
</configuration>